{-# LANGUAGE OverloadedStrings #-}

import Data.Monoid (mappend)
import Hakyll

archive = do
  "Here you can find my old posts"
  ul $ mapM (\post -> li $ a ! href (post . url) ((post . title) <> " - " <> (post . date)))

index = do
  h2 "Welcome"
  img ! src "/images/haskell-logo.png" ! A.style "float: right; margin: 10px;"
  p "Welcome to my blog!"
  p "I've reproduced a list of recent posts here for your reading pleasure:"
  h2 "Posts"
  "$partial(\"templates/post-list.html\")$"
  p $ do
    "â€¦or you can find more in the"
    a ! href "/archive.html" $ "archives"
    "."

defaultHTML :: String -> HTML -> HTML
defaultHTML title body = docTypeHtml ! lang "en" $ do
  H.head $ do
    meta ! charset "utf-8"
    meta ! httpEquiv "x-ua-compatible" ! content "ie=edge"
    meta ! name "viewport" ! content "width=device-width, initial-scale=1"
    H.title "My Hakyll Blog - $title$"
    link ! rel "stylesheet" ! href "/css/default.css"
  body $ do
    header $ do
      H.div ! class_ "logo" $ a ! href "/" $ "My Hakyll Blog"
      nav $ do
        a ! href "/" $ "Home"
        a ! href "/about.html" $ "About"
        a ! href "/contact.html" $ "Contact"
        a ! href "/archive.html" $ "Archive"
    main $ do
      h1 title
      body
    footer $ do
      "Site proudly generated by"
      a ! href "http://jaspervdj.be/hakyll" $ "Hakyll"

--------------------------------------------------------------------------------
main :: IO ()
main = hakyll $ do
  match "css/*.css" $ route idRoute >> compile compressCssCompiler

  match "images/*" $ route idRoute >> compile copyFileCompiler

  match (fromList ["about.rst", "contact.markdown"]) $ do
    route $ setExtension "html"
    compile $
      pandocCompiler
        >>= loadAndApplyTemplate "templates/default.html" defaultContext
        >>= relativizeUrls

  match "posts/*" $ do
    route $ setExtension "html"
    compile $
      pandocCompiler
        >>= loadAndApplyTemplate "templates/post.html" postCtx
        >>= loadAndApplyTemplate "templates/default.html" postCtx
        >>= relativizeUrls

  create ["archive.html"] $ do
    route idRoute
    compile $ do
      posts <- recentFirst =<< loadAll "posts/*"
      let archiveCtx =
            listField "posts" postCtx (return posts)
              `mappend` constField "title" "Archives"
              `mappend` defaultContext

      makeItem ""
        >>= loadAndApplyTemplate "templates/archive.html" archiveCtx
        >>= loadAndApplyTemplate "templates/default.html" archiveCtx
        >>= relativizeUrls

  match "index.html" $ do
    route idRoute
    compile $ do
      posts <- recentFirst =<< loadAll "posts/*"
      let indexCtx =
            listField "posts" postCtx (return posts)
              `mappend` defaultContext

      getResourceBody
        >>= applyAsTemplate indexCtx
        >>= loadAndApplyTemplate "templates/default.html" indexCtx
        >>= relativizeUrls

  match "templates/*" $ compile templateBodyCompiler

--------------------------------------------------------------------------------
postCtx :: Context String
postCtx =
  dateField "date" "%B %e, %Y"
    `mappend` defaultContext
